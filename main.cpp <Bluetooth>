// ƒê·ªãnh nghƒ©a th√¥ng tin Blynk
#define BLYNK_TEMPLATE_ID "TMPL6iWIxyoZn"
#define BLYNK_TEMPLATE_NAME "TEMP"
#define BLYNK_AUTH_TOKEN "Pt1NbKjjmh6VASo9BfmlcSdqT2C55TDQ"

#include <Arduino.h>
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <Preferences.h>
#include <BluetoothSerial.h>
#include <nvs_flash.h>

// BLE
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

BluetoothSerial SerialBT;
Preferences preferences;

// Virtual Pins
#define VIRTUAL_TEMP V0
#define VIRTUAL_HUMID V1                      
#define VIRTUAL_MOIST V2                      
#define VIRTUAL_LED V3
#define VIRTUAL_PUMP V4

// Hardware Pins
#define LED_PIN 4
#define DHTPIN 5        
#define DHTTYPE DHT11   
#define PUMP_PIN 18       
const int moisturePin = 34;  

DHT dht(DHTPIN, DHTTYPE);

String ssid = "", password = "";

// BLE Handler
BLECharacteristic *pBLECharacteristic;

class BLECallback : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic *pCharacteristic) {
    std::string value = pCharacteristic->getValue();
    if (value.length() > 0) {
      String data = String(value.c_str());
      int comma = data.indexOf(',');
      if (comma != -1) {
        ssid = data.substring(0, comma);
        password = data.substring(comma + 1);
        ssid.trim();
        password.trim();

        Serial.println("‚úÖ Nh·∫≠n ƒë∆∞·ª£c qua BLE:");
        Serial.println("SSID: " + ssid);
        Serial.println("PASS: " + password);
      }
    }
  }
};

void setupBLE() {
  BLEDevice::init("ESP32_BLE_WiFi");
  BLEServer *pServer = BLEDevice::createServer();
  BLEService *pService = pServer->createService("12345678-1234-1234-1234-1234567890ab");

  pBLECharacteristic = pService->createCharacteristic(
    "abcdefab-1234-5678-90ab-abcdefabcdef",
    BLECharacteristic::PROPERTY_WRITE
  );

  pBLECharacteristic->setCallbacks(new BLECallback());

  pService->start();
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->start();
  Serial.println("üîµ BLE ƒëang ch·ªù d·ªØ li·ªáu SSID,PASS t·ª´ LightBlue...");
}

void checkWiFiStatus() {
  switch (WiFi.status()) {
    case WL_NO_SSID_AVAIL:
      Serial.println("‚ùå SSID kh√¥ng kh·∫£ d·ª•ng! Ki·ªÉm tra l·∫°i t√™n m·∫°ng.");
      break;
    case WL_CONNECT_FAILED:
      Serial.println("‚ùå K·∫øt n·ªëi th·∫•t b·∫°i! Ki·ªÉm tra SSID ho·∫∑c m·∫≠t kh·∫©u.");
      break;
    case WL_CONNECTION_LOST:
      Serial.println("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi, th·ª≠ l·∫°i...");
      break;
    case WL_DISCONNECTED:
      Serial.println("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WiFi!");
      break;
    case WL_CONNECTED:
      Serial.println("‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");
      break;
    default:
      Serial.println("‚ö†Ô∏è L·ªói WiFi kh√¥ng x√°c ƒë·ªãnh.");
      break;
  }
}

void setup_wifi() {
  WiFi.disconnect(true);
  delay(1000);
  setupBLE();

  Serial.println("‚è≥ Ch·ªù d·ªØ li·ªáu t·ª´ BLE (SSID,PASS ƒë·ªãnh d·∫°ng ssid,password):");
  while (ssid == "" || password == "") {
    delay(500);
  }

  Serial.print("\nüîÑ ƒêang k·∫øt n·ªëi WiFi: ");
  Serial.println(ssid);
  
  WiFi.begin(ssid.c_str(), password.c_str());

  int retry = 0;
  while (WiFi.status() != WL_CONNECTED && retry < 20) {
    delay(500);
    Serial.print(".");
    retry++;
  }

  checkWiFiStatus();

  if (WiFi.status() == WL_CONNECTED) {
    Serial.print("üì∂ ƒê·ªãa ch·ªâ IP: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n‚ùå K·∫øt n·ªëi WiFi th·∫•t b·∫°i! Ki·ªÉm tra l·∫°i th√¥ng tin.");
  }
}

BLYNK_WRITE(VIRTUAL_PUMP) {
  int pumpState = param.asInt();
  digitalWrite(PUMP_PIN, pumpState);
  Serial.println(pumpState ? "üü¢ M√°y b∆°m ƒê√É B·∫¨T!" : "üî¥ M√°y b∆°m ƒê√É T·∫ÆT!");
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  setup_wifi();
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid.c_str(), password.c_str());

  dht.begin();
  pinMode(LED_PIN, OUTPUT);
  pinMode(PUMP_PIN, OUTPUT);
}

void loop() {
  Blynk.run();

  int soilMoistureValue = analogRead(moisturePin);
  int moisture = map(soilMoistureValue, 4095, 0, 0, 100);

  int temperature = dht.readTemperature();
  int humidity = dht.readHumidity();

  Serial.printf("üå° Temp: %d¬∞C | üíß Humidity: %d%% | üå± Moisture: %d%%\n", temperature, humidity, moisture);
  Blynk.virtualWrite(VIRTUAL_TEMP, temperature);
  Blynk.virtualWrite(VIRTUAL_HUMID, humidity);
  Blynk.virtualWrite(VIRTUAL_MOIST, moisture);

  if (moisture <= 30) {
    digitalWrite(PUMP_PIN, HIGH);
    Serial.println("üü¢ B·∫≠t b∆°m n∆∞·ªõc!");
    Blynk.virtualWrite(VIRTUAL_PUMP, 1);
  } else if (moisture >= 60) {
    digitalWrite(PUMP_PIN, LOW);
    Serial.println("üî¥ T·∫Øt b∆°m n∆∞·ªõc!");
    Blynk.virtualWrite(VIRTUAL_PUMP, 0);
  }

  if (Serial.available()) {
    char cmd = Serial.read();
    if (cmd == '1') {
      digitalWrite(PUMP_PIN, HIGH);
      Serial.println("üü¢ M√°y b∆°m ƒê√É B·∫¨T!");
      Blynk.virtualWrite(VIRTUAL_PUMP, 1);
    } else if (cmd == '0') {
      digitalWrite(PUMP_PIN, LOW);
      Serial.println("üî¥ M√°y b∆°m ƒê√É T·∫ÆT!");
      Blynk.virtualWrite(VIRTUAL_PUMP, 0);
    }
  }

  delay(2000);
}
