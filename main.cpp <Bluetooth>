// ƒê·ªãnh nghƒ©a th√¥ng tin Blynk
#define BLYNK_TEMPLATE_ID "TMPL6iWIxyoZn"
#define BLYNK_TEMPLATE_NAME "TEMP"
#define BLYNK_AUTH_TOKEN "Pt1NbKjjmh6VASo9BfmlcSdqT2C55TDQ"

#include <Arduino.h>
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <Preferences.h>
#include <BluetoothSerial.h>
#include <nvs_flash.h>

// BLE
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

BluetoothSerial SerialBT;
Preferences preferences;

// Virtual Pins
#define VIRTUAL_TEMP V0
#define VIRTUAL_HUMID V1                      
#define VIRTUAL_MOIST V2                      
#define VIRTUAL_LED V3
#define VIRTUAL_PUMP V4
#define VIRTUAL_LIGHT V5

// Hardware Pins
#define LED_PIN 4
#define DHTPIN 5        
#define DHTTYPE DHT11   
#define PUMP_PIN 18       
const int moisturePin = 34;  
const int lightSensorPin = 13;

DHT dht(DHTPIN, DHTTYPE);

String ssid = "", password = "";
BLECharacteristic *pBLECharacteristic;  // ƒê·ªÉ set notify v√† read
std::string wifiStatus = "‚è≥ Ch·ªù d·ªØ li·ªáu WiFi...";
bool newCredentialsReceived = false; // ƒê√°nh d·∫•u nh·∫≠n BLE m·ªõi

// BLE Callback nh·∫≠n SSID/PASS
class BLECallback : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic *pCharacteristic) override {
    std::string value = pCharacteristic->getValue();
    if (value.length() > 0) {
      String data = String(value.c_str());
      int comma = data.indexOf(',');
      if (comma != -1) {
        ssid = data.substring(0, comma);
        password = data.substring(comma + 1);
        ssid.trim();
        password.trim();

        newCredentialsReceived = true; // ƒê√°nh d·∫•u c√≥ d·ªØ li·ªáu m·ªõi

        Serial.println("‚úÖ Nh·∫≠n ƒë∆∞·ª£c qua BLE:");
        Serial.println("SSID: " + ssid);
        Serial.println("PASS: " + password);
      }
    }
  }

  void onRead(BLECharacteristic *pCharacteristic) override {
    // M·ªói khi LightBlue nh·∫•n "Read", tr·∫£ v·ªÅ tr·∫°ng th√°i WiFi
    pCharacteristic->setValue(wifiStatus);
    Serial.println("üì§ BLE Read y√™u c·∫ßu ‚Üí g·ª≠i l·∫°i tr·∫°ng th√°i WiFi");
  }
};

void setupBLE() {
  BLEDevice::init("ESP32 c·ªßa Link Link Link");
  BLEServer *pServer = BLEDevice::createServer();
  BLEService *pService = pServer->createService("12345678-1234-1234-1234-1234567890ab");

  pBLECharacteristic = pService->createCharacteristic(
    "abcdefab-1234-5678-90ab-abcdefabcdef",
    BLECharacteristic::PROPERTY_WRITE | BLECharacteristic::PROPERTY_NOTIFY | BLECharacteristic::PROPERTY_READ
  );

  pBLECharacteristic->setCallbacks(new BLECallback());

  pService->start();
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->start();
  Serial.println("üîµ BLE ƒëang ch·ªù d·ªØ li·ªáu SSID,PASS t·ª´ LightBlue...");
}

void connectToWiFiAndBlynk() {
  WiFi.disconnect();
  delay(1000);
  WiFi.begin(ssid.c_str(), password.c_str());

  int retry = 0;
  while (WiFi.status() != WL_CONNECTED && retry < 20) {
    delay(500);
    Serial.print(".");
    retry++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    wifiStatus = "‚úÖ WiFi Connected!";
    Serial.print("\nüì∂ IP: ");
    Serial.println(WiFi.localIP());

    Blynk.begin(BLYNK_AUTH_TOKEN, ssid.c_str(), password.c_str());
  } else {
    wifiStatus = "‚ùå K·∫øt n·ªëi th·∫•t b·∫°i!";
    Serial.println("\n‚ùå K·∫øt n·ªëi WiFi th·∫•t b·∫°i!");
  }

  // G·ª≠i tr·∫°ng th√°i v·ªÅ LightBlue
  pBLECharacteristic->setValue(wifiStatus);
  pBLECharacteristic->notify();
}

void setup_wifi() {
  WiFi.disconnect(true);
  delay(1000);
  setupBLE();

  Serial.println("‚è≥ Ch·ªù d·ªØ li·ªáu t·ª´ BLE (SSID,PASS ƒë·ªãnh d·∫°ng ssid,password):");
  while (ssid == "" || password == "") {
    delay(500);
  }

  connectToWiFiAndBlynk();
}

BLYNK_WRITE(VIRTUAL_PUMP) {
  int pumpState = param.asInt();
  digitalWrite(PUMP_PIN, pumpState);
  Serial.println(pumpState ? "üü¢ M√°y b∆°m ƒê√É B·∫¨T!" : "üî¥ M√°y b∆°m ƒê√É T·∫ÆT!");
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  setup_wifi();
  dht.begin();
  pinMode(LED_PIN, OUTPUT);
  pinMode(PUMP_PIN, OUTPUT);
}

void loop() {
  Blynk.run();

  int soilMoistureValue = analogRead(moisturePin);
  int moisture = map(soilMoistureValue, 4095, 0, 0, 100);

  int temperature = dht.readTemperature();
  int humidity = dht.readHumidity();

  // int soilMoistureValue = random(0,100);
  // int moisture = map(soilMoistureValue, 4095, 0, 0, 100);
  // int moisture = random(0,50);
  // int temperature = random(0,100);
  // int humidity = random(0,100); 

  int lightValue = digitalRead(lightSensorPin);
  // int lightPercent = map(lightValue, 0, 4095, 100, 0); 

  Blynk.virtualWrite(VIRTUAL_TEMP, temperature);
  Blynk.virtualWrite(VIRTUAL_HUMID, humidity);
  Blynk.virtualWrite(VIRTUAL_MOIST, moisture);
  Blynk.virtualWrite(VIRTUAL_LIGHT, lightValue);

  if (moisture <= 30) {
    digitalWrite(PUMP_PIN, HIGH);
    Blynk.virtualWrite(VIRTUAL_PUMP, 1);
  } else if (moisture >= 60) {
    digitalWrite(PUMP_PIN, LOW);
    Blynk.virtualWrite(VIRTUAL_PUMP, 0);
  }

  if(lightValue == HIGH){
    digitalWrite(LED_PIN, HIGH);
    Blynk.virtualWrite(VIRTUAL_LIGHT, 0);
    Blynk.virtualWrite(VIRTUAL_LED, 1);
  } else if (lightValue == LOW){
    digitalWrite(LED_PIN, LOW);
    Blynk.virtualWrite(VIRTUAL_LIGHT, 1);
    Blynk.virtualWrite(VIRTUAL_LED, 0);
  }

  if (Serial.available()) {
    char cmd = Serial.read();
    if (cmd == '1') {
      digitalWrite(PUMP_PIN, HIGH);
      Serial.println("üü¢ M√°y b∆°m ƒê√É B·∫¨T!");
      Blynk.virtualWrite(VIRTUAL_PUMP, 1);
    } else if (cmd == '0') {
      digitalWrite(PUMP_PIN, LOW);
      Serial.println("üî¥ M√°y b∆°m ƒê√É T·∫ÆT!");
      Blynk.virtualWrite(VIRTUAL_PUMP, 0);
    }
  }

  if (newCredentialsReceived) {
    newCredentialsReceived = false;
    Serial.println("üîÅ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i WiFi v·ªõi d·ªØ li·ªáu m·ªõi...");
    connectToWiFiAndBlynk();
  }

  delay(2000);
}

